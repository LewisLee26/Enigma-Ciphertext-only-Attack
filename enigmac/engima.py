import ctypes
import ctypes.util
from itertools import permutations
from tqdm import tqdm

enigma_lib = ctypes.CDLL(r'C:\Users\lewis\Documents\GitHub\Enigmac\enigma.dll')  # Replace with the actual path to your shared library

# Define the argument and return types for the run_enigma function
enigma_lib.run_enigma.argtypes = [
    ctypes.c_int,                 # reflector
    ctypes.POINTER(ctypes.c_int), # wheel_order
    ctypes.c_char_p,              # ring_setting
    ctypes.c_char_p,              # wheel_pos
    ctypes.c_char_p,              # plugboard_pairs
    ctypes.c_uint,                # plaintextsize
    ctypes.c_char_p               # from
]
enigma_lib.run_enigma.restype = ctypes.c_char_p
# enigma_lib.free_memory.argtypes = [ctypes.c_char_p]
# enigma_lib.free_memory.restype = None


def run_enigma(reflector, wheel_order, ring_setting, wheel_pos, plugboard_pairs, plaintextsize, from_str):
    return enigma_lib.run_enigma(
        reflector,
        (ctypes.c_int * len(wheel_order))(*wheel_order),
        ctypes.create_string_buffer(ring_setting.encode(), 3),
        ctypes.create_string_buffer(wheel_pos.encode(), 3),
        ctypes.create_string_buffer(plugboard_pairs.encode(), 26),
        plaintextsize,
        ctypes.create_string_buffer(from_str.encode())
    ).decode()


# setting for test
reflector = 1
wheel_order = [0, 1, 2]
ring_setting = "ABC"
ring_setting = "AAA"
wheel_pos = "AOR"
wheel_pos = "ANP"
plugboard_pairs = "ARBYCOHXINMZ"
# plugboard_pairs = ""
plaintextsize = 480
plaintext = "INEVERREALLYEXPECTEDTOFINDMYSELFGIVINGADVICETOPEOPLEGRADUATINGFROMANESTABLISHMENTOFHIGHEREDUCATIONINEVERGRADUATEDFROMANYSUCHESTABLISHMENTINEVEREVENSTARTEDATONEIESCAPEDFROMSCHOOLASSOONASICOULDWHENTHEPROSPECTOFFOURMOREYEARSOFENFORCEDLEARNINGBEFOREIDBECOMETHEWRITERIWANTEDTOBEWASSTIFLINGIGOTOUTINTOTHEWORLDIWROTEANDIBECAMEABETTERWRITERTHEMOREIWROTEANDIWROTESOMEMOREANDNOBODYEVERSEEMEDTOMINDTHATIWASMAKINGITUPASIWENTALONGTHEYJUSTREADWHATIWROTEANDTHEYPAIDFORITORTHEYDIDNTANDOFTENTHEYCOMMISSIONEDMETOWRITESOMETHINGELSEFORTHEMWHICHHASLEFTMEWITHAHEALTHYRESPECTANDFONDNESSFORHIGHEREDUCATIONTHATTHOSEOFMYFRIENDSANDFAMILYWHOATTENDEDUNIVERSITIESWERECUREDOFLONGAGOLOOKINGBACKIVEHADAREMARKABLERIDEIMNOTSUREICANCALLITACAREERBECAUSEACAREERIMPLIESTHATIHADSOMEKINDOFCAREERPLANANDINEVERDIDTHENEARESTTHINGIHADWASALISTIMADEWHENIWAS15OFEVERYTHINGIWANTEDTODOTOWRITEANADULTNOVELACHILDRENSBOOKACOMICAMOVIERECORDANAUDIOBOOKWRITEANEPISODEOFDOCTORWHOANDSOONIDIDNTHAVEACAREERIJUSTDIDTHENEXTTHINGONTHELISTSOITHOUGHTIDTELLYOUEVERYTHINGIWISHIDKNOWNSTARTINGOUTANDAFEWTHINGSTHATLOOKINGBACKONITISUPPOSETHATIDIDKNOWANDTHATIWOULDALSOGIVEYOUTHEBESTPIECEOFADVICEIDEVERGOTWHICHICOMPLETELYFAILEDTOFOLLOWFIRSTOFALLWHENYOUSTARTOUTONACAREERINTHEARTSYOUHAVENOIDEAWHATYOUAREDOINGTHISISGREATPEOPLEWHOKNOWWHATTHEYAREDOINGKNOWTHERULESANDKNOWWHATISPOSSIBLEANDIMPOSSIBLEYOUDONOTANDYOUSHOULDNOTTHERULESONWHATISPOSSIBLEANDIMPOSSIBLEINTHEARTSWEREMADEBYPEOPLEWHOHADNOTTESTEDTHEBOUNDSOFTHEPOSSIBLEBYGOINGBEYONDTHEMANDYOUCANIFYOUDONTKNOWITSIMPOSSIBLEITSEASIERTODOANDBECAUSENOBODYSDONEITBEFORETHEYHAVENTMADEUPRULESTOSTOPANYONEDOINGTHATAGAINYETSECONDLYIFYOUHAVEANIDEAOFWHATYOUWANTTOMAKEWHATYOUWEREPUTHERETODOTHENJUSTGOANDDOTHAT"
from_str = "CKFRKWZSEHCKSRFJIBWXRMMFHJCWJLFHFYNBWXULALKDVNLURSPWXNTBAWZKCQWVXCNCXXQVQDQLCAKYGSPIUQOUQXARYMHEIAVWBTZUZDYXZGHPGMHRUUWCELNZRJENVSDTFKMYXKOVZBQDEUZTFVZPLKTRJGLKBORCXYSLYMRAORDTIYDZSWAXTOSBJPINJPRZQNWECWNQOMKNGPCNRHWQAMGJXTLJHJNUJYYKTUSPRPTRALIZICFZJMKBFFQZPZGEBMUSIEJQVKGCTNFLZSEMHOSLDBYZJRYDRGQNJUPIAHJWZIXDADJMWQAGVJLGZGFCLMECEXBLRXTBCZIZVPCRPKUVGCXRJUFVBMEDIILDZAAYBFIREMHBHBZOWCRKQLYEKKGGVBQGRIATLOWOENQBBZRVIVTUTNNWRDTGFZCIABXVAZZPNLCTJKCJAEXVWHZWOEKCBQMKMSAWPIRCHXVJCMNFJFBAJKTNKLCMWBBYPDKTAVMCTBOXCHXSBQQYZIVQVCLQZQRFNXXUPOLQNMMBDGLRNHGVAOAPBUWBJMOZYXFGJURDETDCOAYDQQMNJLJZMXFVBJVKWVUJXTTBACBRIUJYBLCOZMOIRGRJLIZMPWKRJXUTTGVHRDZAKLSSIOIEHIYWLSQHCGHGRRUPICGHOJQSWGXYFFIBFKLLLRVJSTTZQWLJSWXLNRESBKXJKLZOBPRLQFZBPLZUPNPAUJFMVYVSCRCJRJHNKXUYPVQMWMWHNVGHPIZANQWUPAALEMHAYANFDUGMJDUVHRCDYPNBPOTKUOZYXHUXSLFMMRDLTLIXZGMVJPRYSYPTMNOZQUXNEOHZNNTGQEHALJHTWEHBQVKOOJTCGMSUXEHBOMXBXWUGLIALJPDBVMSJUZTUPYLOBOYUXXDGAUHYSNZAVSXJIEQVMFBNQZYXRASWFANPXKWSABNGEQPNHBFFNEXEONWAPVTMKQRABCIHJMPYCCMBVQNHMCHGNDKRCJWQIYJMBQGZCHCWVJPVWVMZENBRQXOKCAFPBGAKAEJZJJWDAZIJMVEOWLWMMSSDAMTKALHBFNEEVKXHDTVTKOHLRHVCFNEOXZKCLBLROFPHUNOYCRIWTPWJEKGCFVAWRQWFAYBXFPEWRGJMVSVFWPPUQYWWYLXLIZFXRKRTLGZPQTXDGQRTMKMDITHNCPIIDKTBJKCURTHAUITPIVDRXIWLIXXCDQHXREZZSCAGKIEUMJYEBGFFXXIDJAUNJPONFPLZCBONNJOUQEJIIPUSCBELPFJYVYJSVJXCYYLVLXUURRMPRBQHTRLRXOLSBMKDFSSGDWBFGKZUEJQRTBFVTOWPQMACUVVYAWZCMYQPOJGPEUAJYYGJRDPRGDYPVWGLQJVRLKOPBRAZOEXKGFNVYDDXYBVKWPELSPVPASQRQJECBUKHCTFXVNPTGUPGGOLLUZBPPPHLOCCPDGZUSDYRUCDUVRRELISSAQVVEHBYWVKILBRVNYSTKHTSRMPEEEJOBCIZVLTUQIKSODWZFDCFJODQPECXZTWWKJPSQDTCZPEWGIWCQWEFHGJPXIAAYTNTTVKOGFFCARLPNEAXNHGCTPNIVKYHIYMERGTGWOJCZFXYBYFCHMIOWLREWRPUYHRBQRDKXWVVRUUICXOACFKOZWTYWUULBKMQ"


result_pointer = run_enigma(reflector, wheel_order, ring_setting, wheel_pos, plugboard_pairs, plaintextsize, from_str)
result_bytes = ctypes.string_at(result_pointer, plaintextsize)
print(type(result_pointer))
print(result_bytes.decode('utf-8'))

input()

wheels = [0, 1, 2, 3, 4]
combinations_list = list(permutations(wheels, 3))


def run_enigma_test():
    count = 0
    highest_count = 0
    highest_pos = []
    pbar = tqdm(total=(60*26**3))
    for wheel_order in combinations_list:
        for i in range(26):
            for j in range(26):
                for k in range(26):
                    # total_index = 676*i+26*j+k
                    wheel_pos = chr(65+i) + chr(65+j) + chr(65+k)
                    print("test")
                    result_pointer = run_enigma(reflector, wheel_order, ring_setting, wheel_pos, plugboard_pairs, plaintextsize, from_str)
                    print("test2")
                    # result_bytes = ctypes.string_at(result_pointer, plaintextsize)
                    pbar.update(1)

print("hello")
run_enigma_test()
print("bye")